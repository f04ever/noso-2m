name: build
on:
  push:
    branches: [ main, devel, develga ]
    tags:
      - "*"
jobs:
  build-linux:
    name: 'Build Linux'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Build source
      run: |
        sudo apt-get -qqy update
        sudo apt-get -qqy upgrade
        sudo apt-get -qqy install clang-14 lld-14 libc++-14-dev libc++abi-14-dev
        sudo apt-get -qqy install binutils-i686-linux-gnu
        sudo apt-get -qqy install binutils-arm-linux-gnueabihf
        sudo apt-get -qqy install binutils-aarch64-linux-gnu
        sudo apt-get -qqy install gcc-12-i686-linux-gnu
        sudo apt-get -qqy install gcc-12-arm-linux-gnueabihf
        sudo apt-get -qqy install gcc-12-aarch64-linux-gnu
        sudo apt-get -qqy install g++-12-i686-linux-gnu
        sudo apt-get -qqy install g++-12-arm-linux-gnueabihf
        sudo apt-get -qqy install g++-12-aarch64-linux-gnu
        #
        wget -q http://de.archive.ubuntu.com/ubuntu/pool/main/n/ncurses/libncurses-dev_6.3-2_amd64.deb
        dpkg-deb -x libncurses-dev_6.3-2_amd64.deb libncurses-dev_amd64
        wget -q http://de.archive.ubuntu.com/ubuntu/pool/main/n/ncurses/libncurses-dev_6.3-2_i386.deb
        dpkg-deb -x libncurses-dev_6.3-2_i386.deb libncurses-dev_i386
        wget -q https://mirrors.ecnu.edu.cn/ubuntu-ports/ubuntu-ports/pool/main/n/ncurses/libncurses-dev_6.3-2_arm64.deb
        dpkg-deb -x libncurses-dev_6.3-2_arm64.deb libncurses-dev_arm64
        wget -q https://mirrors.ecnu.edu.cn/ubuntu-ports/ubuntu-ports/pool/main/n/ncurses/libncurses-dev_6.3-2_armhf.deb
        dpkg-deb -x libncurses-dev_6.3-2_armhf.deb libncurses-dev_armhf
        #
        wget -q http://de.archive.ubuntu.com/ubuntu/pool/universe/l/llvm-toolchain-14/libc++-14-dev_14.0.6-9_i386.deb
        dpkg-deb -x libc++-14-dev_14.0.6-9_i386.deb clang+llvm-i386-linux-gnu
        wget -q http://de.archive.ubuntu.com/ubuntu/pool/universe/l/llvm-toolchain-14/libc++abi-14-dev_14.0.6-9_i386.deb
        dpkg-deb -x libc++abi-14-dev_14.0.6-9_i386.deb clang+llvm-i386-linux-gnu
        wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.6/clang+llvm-14.0.6-aarch64-linux-gnu.tar.xz
        tar xf clang+llvm-14.0.6-aarch64-linux-gnu.tar.xz
        wget -q https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.6/clang+llvm-14.0.6-armv7a-linux-gnueabihf.tar.xz
        tar xf clang+llvm-14.0.6-armv7a-linux-gnueabihf.tar.xz
        #
        # wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        # unzip -q android-ndk-r25b-linux.zip # --< exception during building
        wget -q https://dl.google.com/android/repository/android-ndk-r24-linux.zip
        unzip -q android-ndk-r24-linux.zip
        # wget -q https://dl.google.com/android/repository/android-ndk-r23b-linux.zip
        # unzip -q android-ndk-r23b-linux.zip
        # test old devices like Sumsung Galaxy S6
        # wget -q https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip
        # unzip -q android-ndk-r21e-linux-x86_64.zip
        #
        clang++-14 --target=i686-linux-gnu --sysroot=/usr/i686-linux-gnu \
          -L$(pwd)/clang+llvm-i386-linux-gnu/usr/lib/llvm-14/lib \
          -I$(pwd)/libncurses-dev_i386/usr/include \
          -L$(pwd)/libncurses-dev_i386/usr/lib/i386-linux-gnu \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-linux-i686 \
          -DNDEBUG \
          -DNO_TEXTUI \
          -Ofast \
          -std=c++20 \
          --stdlib=libc++ \
          -fuse-ld=lld-14 \
          -flto \
          -finline-functions -funroll-loops -fvectorize \
          -lpthread -lc++ -lc++abi \
          -lncurses -lform -ltermcap \
          -static \
          -s
        file noso-2m-linux-i686
        #
        clang++-14 \
          -I$(pwd)/libncurses-dev_amd64/usr/include \
          -L$(pwd)/libncurses-dev_amd64/usr/lib/x86-64-linux-gnu \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-linux-x86_64 \
          -DNDEBUG \
          -DNO_TEXTUI \
          -Ofast \
          -std=c++20 \
          --stdlib=libc++ \
          -fuse-ld=lld-14 \
          -flto \
          -finline-functions -funroll-loops -fvectorize \
          -lpthread -lc++ -lc++abi \
          -lncurses -lform -ltermcap \
          -static \
          -s
        file noso-2m-linux-x86_64
        #
        clang++-14 --target=arm-linux-gnueabihf --sysroot=/usr/arm-linux-gnueabihf \
          -L$(pwd)/clang+llvm-14.0.6-armv7a-linux-gnueabihf/lib \
          -I$(pwd)/libncurses-dev_armhf/usr/include \
          -L$(pwd)/libncurses-dev_armhf/usr/lib/arm-linux-gnueabihf \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-linux-armv7a \
          -DNDEBUG \
          -DNO_TEXTUI \
          -Ofast \
          -std=c++20 \
          --stdlib=libc++ \
          -fuse-ld=lld-14 \
          -flto -finline-functions -funroll-loops -fvectorize \
          -lpthread -lc++ -lc++abi \
          -lncurses -lform -ltermcap \
          -static \
          -s
        file noso-2m-linux-armv7a
        #
        clang++-14 --target=aarch64-linux-gnu --sysroot=/usr/aarch64-linux-gnu \
          -L$(pwd)/clang+llvm-14.0.6-aarch64-linux-gnu/lib \
          -I$(pwd)/libncurses-dev_arm64/usr/include \
          -L$(pwd)/libncurses-dev_arm64/usr/lib/aarch64-linux-gnu \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-linux-aarch64 \
          -DNDEBUG \
          -DNO_TEXTUI \
          -Ofast \
          -std=c++20 \
          --stdlib=libc++ \
          -fuse-ld=lld-14 \
          -flto \
          -finline-functions -funroll-loops -fvectorize \
          -lpthread -lc++ -lc++abi \
          -lncurses -lform -ltermcap \
          -static \
          -s
        file noso-2m-linux-aarch64
        #
        wget -q https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.3.tar.gz
        tar xf ncurses-6.3.tar.gz
        #
        mkdir armv7a-linux-androideabi-ncurses
        cd ncurses-6.3
        # CC=$(pwd)/../android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang \
        # STRIP=$(pwd)/../android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
        # CC=$(pwd)/../android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi31-clang \
        # STRIP=$(pwd)/../android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
        CC=$(pwd)/../android-ndk-r24/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi32-clang \
        STRIP=$(pwd)/../android-ndk-r24/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
        ./configure \
          --host=armv7a-linux-androideabi \
          --prefix=$(pwd)/../armv7a-linux-androideabi-ncurses \
          --with-terminfo-dirs="/etc/terminfo:/lib/terminfo:/usr/share/terminfo:/usr/etc/terminfo:/usr/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo" \
          --without-manpages --without-progs --without-tack --without-tests 2>&1 > /dev/null
        make 2>&1 > /dev/null
        make install 2>&1 > /dev/null
        cd ..
        #
        # android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi33-clang++ \
        # android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi31-clang++ \
        # android-ndk-r21e/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi30-clang++ \
        android-ndk-r24/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi32-clang++ \
          -I$(pwd)/armv7a-linux-androideabi-ncurses/include \
          -I$(pwd)/armv7a-linux-androideabi-ncurses/include/ncurses \
          -L$(pwd)/armv7a-linux-androideabi-ncurses/lib \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-android-armv7a \
          -DNDEBUG \
          -DNO_TEXTUI \
          -Ofast \
          -std=c++20 \
          -finline-functions -funroll-loops -fvectorize \
          -lncurses -lform \
          -static \
          -s
          # below options work well if doing build native on the device
          # but may cause problems with cross-build
          # -flto \ # --> may causes exception for cxxopts option format
        file noso-2m-android-armv7a
        #
        cd ncurses-6.3
        # CC=$(pwd)/../android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang \
        # STRIP=$(pwd)/../android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
        # CC=$(pwd)/../android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang \
        # STRIP=$(pwd)/../android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
        CC=$(pwd)/../android-ndk-r24/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android32-clang \
        STRIP=$(pwd)/../android-ndk-r24/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip \
        ./configure \
          --host=aarch64-linux-android \
          --prefix=$(pwd)/../aarch64-linux-android-ncurses \
          --with-terminfo-dirs="/etc/terminfo:/lib/terminfo:/usr/share/terminfo:/usr/etc/terminfo:/usr/lib/terminfo:/data/data/com.termux/files/usr/share/terminfo" \
          --without-manpages --without-progs --without-tack --without-tests 2>&1 > /dev/null
        make 2>&1 > /dev/null
        make install 2>&1 > /dev/null
        cd ..
        # android-ndk-r25b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++ \
        # android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang++ \
        # android-ndk-r21e/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang++ \
        android-ndk-r24/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android32-clang++ \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -I$(pwd)/aarch64-linux-android-ncurses/include \
          -I$(pwd)/aarch64-linux-android-ncurses/include/ncurses \
          -L$(pwd)/aarch64-linux-android-ncurses/lib \
          -o noso-2m-android-aarch64 \
          -DNDEBUG \
          -DNO_TEXTUI \
          -Ofast \
          -std=c++20 \
          -finline-functions -funroll-loops -fvectorize \
          -lncurses -lform \
          -static \
          -s
          # below options work well if doing build native on the device
          # but may cause problems with cross-build
          # -flto \ # --> may causes exception for cxxopts option format
        file noso-2m-android-aarch64
      shell: bash
    - name: Upload artifacs
      uses: actions/upload-artifact@v2
      with:
        name: 'ubuntu-latest'
        path: |
          README.md
          noso-2m-SAMPLE.cfg
          noso-2m-linux-i686
          noso-2m-linux-x86_64
          noso-2m-linux-armv7a
          noso-2m-linux-aarch64
          noso-2m-android-armv7a
          noso-2m-android-aarch64
  build-windows:
    name: 'Build Windows'
    runs-on: 'windows-latest'
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Build source
      run: |
        clang++ --target=i686-pc-win32 \
          -Imingw-w64-clang-i686-ncurses-6_3\\include \
          -Imingw-w64-clang-i686-ncurses-6_3\\include\\ncurses \
          mingw-w64-clang-i686-ncurses-6_3\\lib\\libncurses.dll.a \
          mingw-w64-clang-i686-ncurses-6_3\\lib\\libform.dll.a \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-i686.exe \
          -std=c++20 -Ofast -DNOGDI -DNDEBUG -DNO_TEXTUI \
          -Wl,-machine:x86 -nostdlib -lWs2_32.lib -liphlpapi.lib -lmsvcrt
        clang++ --target=x86_64-pc-win32 \
          -Imingw-w64-clang-x86_64-ncurses-6_3\\include \
          -Imingw-w64-clang-x86_64-ncurses-6_3\\include\\ncurses \
          mingw-w64-clang-x86_64-ncurses-6_3\\lib\\libncurses.dll.a \
          mingw-w64-clang-x86_64-ncurses-6_3\\lib\\libform.dll.a \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-x86_64.exe \
          -std=c++20 -Ofast -DNOGDI -DNDEBUG -DNO_TEXTUI \
          -Wl,-machine:x64 -nostdlib -lWs2_32.lib -liphlpapi.lib -lmsvcrt
      shell: bash
    - name: Upload artifacs
      uses: actions/upload-artifact@v2
      with:
        name: 'windows-latest'
        path: |
          README.md
          noso-2m-SAMPLE.cfg
          mingw-w64-clang-i686-ncurses-6_3\\bin\\libncurses6.dll
          mingw-w64-clang-i686-ncurses-6_3\\bin\\libform6.dll
          noso-2m-i686.exe
          mingw-w64-clang-x86_64-ncurses-6_3\\bin\\libncurses6.dll
          mingw-w64-clang-x86_64-ncurses-6_3\\bin\\libform6.dll
          noso-2m-x86_64.exe
  build-macos:
    name: 'Build macOS'
    runs-on: 'macos-latest'
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Build source
      run: |
        clang++ \
          noso-2m.cpp inet.cpp comm.cpp util.cpp tool.cpp misc.cpp mining.cpp hashing.cpp md5-c.cpp \
          -o noso-2m-darwin-x86_64 \
          -std=c++20 -Ofast -DNDEBUG -DNO_TEXTUI \
          -flto -finline-functions -funroll-loops -fvectorize \
          -lncurses -lform -ltermcap
        strip -x noso-2m-darwin-x86_64
        file noso-2m-darwin-x86_64
      shell: bash
    - name: Upload artifacs
      uses: actions/upload-artifact@v2
      with:
        name: 'macos-latest'
        path: |
          README.md
          noso-2m-SAMPLE.cfg
          noso-2m-darwin-x86_64
  release-linux:
    if: contains(github.ref, '/tags/')
    name: 'Release ubuntu-latest'
    runs-on: 'ubuntu-latest'
    needs: [build-linux]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Package artifacts
        run: |
          tag=${{ github.event.ref }}
          tag=${tag#"refs/tags/"}
          cp ubuntu-latest/README.md README.md
          cp ubuntu-latest/noso-2m-SAMPLE.cfg noso-2m-SAMPLE.cfg
          #
          cp ubuntu-latest/noso-2m-linux-i686 noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-linux-i686.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
          #
          cp ubuntu-latest/noso-2m-linux-x86_64 noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-linux-x86_64.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
          #
          cp ubuntu-latest/noso-2m-linux-armv7a noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-linux-armv7a.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
          #
          cp ubuntu-latest/noso-2m-linux-aarch64 noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-linux-aarch64.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
          #
          cp ubuntu-latest/noso-2m-android-armv7a noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-android-armv7a.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
          #
          cp ubuntu-latest/noso-2m-android-aarch64 noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-android-aarch64.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
        shell: bash
      - name: Upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            noso-2m-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release-macos:
    if: contains(github.ref, '/tags/')
    name: 'Release macos-latest'
    runs-on: 'macos-latest'
    needs: [build-macos]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Package artifacts
        run: |
          tag=${{ github.event.ref }}
          tag=${tag#"refs/tags/"}
          cp macos-latest/README.md README.md
          cp macos-latest/noso-2m-SAMPLE.cfg noso-2m-SAMPLE.cfg
          cp macos-latest/noso-2m-darwin-x86_64 noso-2m
          chmod +x noso-2m
          tar -zcvf noso-2m-${tag}-darwin-x86_64.tar.gz noso-2m noso-2m-SAMPLE.cfg README.md
        shell: bash
      - name: Upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            noso-2m-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release-windows:
    if: contains(github.ref, '/tags/')
    name: 'Release windows-latest'
    runs-on: 'windows-latest'
    needs: [build-windows]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Package artifacts
        run: |
          tag=${{ github.event.ref }}
          tag=${tag#"refs/tags/"}
          cp windows-latest/README.md README.md
          cp windows-latest/noso-2m-SAMPLE.cfg noso-2m-SAMPLE.cfg
          #
          cp windows-latest/noso-2m-x86_64.exe noso-2m.exe
          cp windows-latest/mingw-w64-clang-x86_64-ncurses-6_3\\bin\\libncurses6.dll libncurses6.dll
          cp windows-latest/mingw-w64-clang-x86_64-ncurses-6_3\\bin\\libform6.dll libform6.dll
          7z a -tzip noso-2m-${tag}-win64-x86_64.zip noso-2m.exe libncurses6.dll libform6.dll noso-2m-SAMPLE.cfg README.md
          #
          cp windows-latest/noso-2m-i686.exe noso-2m.exe
          cp windows-latest/mingw-w64-clang-i686-ncurses-6_3\\bin\\libncurses6.dll libncurses6.dll
          cp windows-latest/mingw-w64-clang-i686-ncurses-6_3\\bin\\libform6.dll libform6.dll
          7z a -tzip noso-2m-${tag}-win32-i686.zip noso-2m.exe libncurses6.dll libform6.dll noso-2m-SAMPLE.cfg README.md
        shell: bash
      - name: Upload artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            noso-2m-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
